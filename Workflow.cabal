name: Workflow
version: 0.6.0.0
cabal-version: -any
build-type: Simple
license: BSD3
license-file: LICENSE
copyright:
maintainer: agocorona@gmail.com
build-depends: vector -any, transformers -any,
               extensible-exceptions -any, MonadCatchIO-mtl -any, monadIO -any,
               base >=4 && <5, binary -any, bytestring -any, containers -any,
               RefSerialize >=0.2.8 && <0.3, TCache >=0.9 && <1.0, stm >2,
               old-time -any, mtl -any
stability: experimental
homepage:
package-url:
bug-reports: agocorona@gmail.com
synopsis: library for transparent execution  of interruptible  computations
description: Transparent support  for interruptible computations. A workflow can be seen as a persistent thread that executes any
             monadic computation. Therefore, it can be used in very time consuming computations such are CPU intensive calculations
             or procedures that are most of the time waiting for the action of a process or an user, that are prone to comunication
             failures, timeouts or shutdowns.
             .
             The computantion can be restarted at the interrupted point thanks to its logged state in permanent storage.
             Besides that, the package also provides other services associated to workflows
             .
             New in this release,
             .
             * 0.6.0.0 Changes in ghc 7.4 forces to drop the abstract serializer
             now Text and  binary versions are the same.
             For binary serialization, use 'showBinary' and 'readpBinary'
             .
             * 0.5.8.2 minor changes for the MFlow package
             .
             * 0.5.8.1 solved a bug that caused a "casting failure"
             .
             * 0.5.8:
             .
             *registerType is no longer needed
             .
             * Configurable state persistence (for example, in databases) . Default in files
             .
             * Added Data.Binary  serialization (Use `Control.Workflow.Binary`) besides Text serialization  (`Control.Wokflow.Text`)
             .
             * New simpler and more intuitive workflow  primitives with excepion handling
             .
             * Instances of classes in Control.Concurrent.MonadIO, MonadCatchIO
             .
             * An EDSL of workflow patterns. To express  bifurcations, confluences, timeouts etc
             .
             * References to  workflow objects, that can be accessed externally: WFRef's
             .
             Previous versions:
             .
             * Persisten communications facilities trough persistent data objects, inspection of workflow states ,  persistent  queues, persistent timeouts and, new in this release, References to internal workflow objects WFRef's
             .
             * workflow management and monitoring, view workflow history and intermediate results.
category: Control, Workflow, Concurrent
author: Alberto GÃ³mez Corona
tested-with:
data-files:
data-dir: ""
extra-source-files: Demos/docAprobal.hs
                    Demos/sequence.hs
                    Demos/Fact.hs
                    Demos/Inspect.hs
                    Demos/pr.hs
extra-tmp-files:
exposed-modules: Control.Workflow.Configuration
                 Control.Workflow
                 Control.Workflow.Patterns
                 Data.Persistent.Queue
exposed: True
buildable: True
build-tools:
cpp-options:
cc-options:
ld-options:
pkgconfig-depends:
frameworks:
c-sources:
default-language:
other-languages:
default-extensions:
other-extensions:
extensions:
extra-libraries:
extra-lib-dirs:
includes:
install-includes:
include-dirs:
hs-source-dirs: .
other-modules: Control.Workflow.IDynamic Control.Workflow.Stat
ghc-prof-options:
ghc-shared-options:
ghc-options:
hugs-options:
nhc98-options:
jhc-options:
